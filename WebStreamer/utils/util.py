import traceback
from pyrogram import Client
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums.parse_mode import ParseMode
from pyrogram.errors import UserNotParticipant

from WebStreamer.vars import Var

async def force_sub(client: Client, message:Message):
    if Var.FORCE_UPDATES_CHANNEL:
        try:
            user = await client.get_chat_member(Var.UPDATES_CHANNEL, message.chat.id)
            print(user.status.name)
            if user.status.name == "BANNED":
                await message.reply_text(
                    text=f"__S·¥è Ä Ä è S…™ Ä, Y·¥è·¥ú ·¥Ä Ä·¥á B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á.__\n\n  **C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è [D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä](tg://user?id={Var.OWNER_ID}) T ú·¥á è W…™ ü ü H·¥á ü·¥ò Y·¥è·¥ú**",
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
                return False
        except UserNotParticipant:
            await message.reply_text(
                text="""<i>J·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥úÍú±·¥á ·¥ç·¥á üîê</i>""",
                reply_markup=InlineKeyboardMarkup(
                    [[ InlineKeyboardButton("J·¥è…™…¥ …¥·¥è·¥° üîì", url=f"https://t.me/{Var.UPDATES_CHANNEL}") ]]
                ),
                parse_mode=ParseMode.HTML
            )
            return False
        except Exception as e:
            await message.reply_text(
                text=f"**S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ W Ä·¥è…¥…¢. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è [D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä](tg://user?id={Var.OWNER_ID})**",
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True)
            return False
    return True